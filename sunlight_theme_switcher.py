#!/usr/bin/python
import subprocess
from dateutil import tz

from crontab import CronTab 
from suntime import Sun, SunTimeException
import argparse

USER = 'daan'
SCRIPT_PATH = '~/scripts/sunlight_theme_switcher.py'

LIGHT_THEME = 'Yaru'
DARK_THEME = 'Adwaita-dark'

# Amsterdam
LATITUDE = 52.37
LONGITUDE = 4.90

def find_matching_jobs(cron, submatch, user=True):
    gen = cron.find_command(submatch)
    entries_found = False

    entries = []
    for entry in gen:
        entries_found = True
        entries.append(entry)

    if not entries_found:
        print('Found no matching cron entries.')

    return entries

def remove_crontab_jobs(user=True):
    """Use this function to remove all crontab jobs generated by this script.
    """
    cron = CronTab(user=user)
    entries = find_matching_jobs(cron, 'theme_switcher.py', user=user)

    if len(entries) < 1:
        print('Found no matching cron entries, none removed.')

    for entry in entries:
        print('Remove entry:')
        print(entry)
        cron.remove(entry)

    cron.write()

def update_crontab(sunrise, sunset, user=True):
    cron = CronTab(user=user)
    existing_entries = find_matching_jobs(cron, SCRIPT_PATH, user=user)
    
    if len(existing_entries) > 0:
        # Do some sanity checks 
        assert len(existing_entries) == 2, 'Wrong number of `sunlight_theme_switcher.py` entries found.'
        assert 'Sunrise @' in existing_entries[0].comment, "Comment for sunrise job didn't match expected format." 
        assert 'Sunset @' in existing_entries[1].comment, "Comment for sunrise job didn't match expected format."

        # OK, update existing jobs
        set_light_theme_job = existing_entries[0]
        set_dark_theme_job = existing_entries[1]

        set_light_theme_job.hour.on(sunrise.hour)   
        set_light_theme_job.minute.on(sunrise.minute)

        set_dark_theme_job.hour.on(sunset.hour)   
        set_dark_theme_job.minute.on(sunset.minute)

        for entry in cron:
            print(entry)

    else:

        set_light_theme_job = cron.new(command=f'python3 {SCRIPT_PATH} --mode light-mode', 
                                    comment=f'Sunrise @ {sunrise.strftime("%H:%M")}')
        set_light_theme_job.hour.on(sunrise.hour)   
        set_light_theme_job.minute.on(sunrise.minute)   
        
        set_dark_theme_job = cron.new(command=f'python3 {SCRIPT_PATH} --mode dark-mode', 
                                    comment=f'Sunset @ {sunset.strftime("%H:%M")}')
        set_dark_theme_job.hour.on(sunset.hour)   
        set_dark_theme_job.minute.on(sunset.minute)   
        
        if not set_dark_theme_job.is_valid():
            raise 'Cron job set_dark_theme_job found invalid.'
        if not set_light_theme_job.is_valid():
            raise 'Cron job set_light_theme_job found invalid.'    

        for entry in cron:
            print(entry)

    cron.write()

def retrieve_sunrise_sunset():
    """Uses the `suntime` library to retrieve sunrise and sunset times 
    for the provided latitude/longitude coordinates in the local time zone.

    Returns:
        tuple: sunrise time (datetime object), sunset time (datetime object)
    """

    # Auto-detect local timezone
    to_zone = tz.tzlocal()

    try:    
        sun = Sun(LATITUDE, LONGITUDE)

        # Get today's sunrise and sunset in UTC and convert to local time zone
        today_sunrise = sun.get_sunrise_time().astimezone(to_zone)
        today_sunset = sun.get_sunset_time().astimezone(to_zone)

    except SunTimeException as e:
        print(f"Couldn't get sunrise/sunset times: {e}")

    return today_sunrise, today_sunset 

def set_theme(theme_name):
    cmd = 'gsettings set org.gnome.desktop.interface gtk-theme ' + theme_name
    subprocess.run(cmd, shell=True)

def set_light_theme():
    set_theme(LIGHT_THEME)

def set_dark_theme():
    set_theme(DARK_THEME)


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    help_statement = """"Choose run mode: 
    - 'light-mode' to switch to the designated 'light' GTK theme;
    - 'dark-mode' to switch to the designated 'dark' GTK theme;
    - 'upsert' to insert or update cron commands; 
    - 'reset' to remove all cron commands.
    """
    parser.add_argument("--mode", help=help_statement)
    args = parser.parse_args()

    if args.mode == 'light-mode':
        set_light_theme()
    
    elif args.mode == 'dark-mode':
        set_dark_theme()

    elif args.mode == 'upsert':
        sunrise, sunset = retrieve_sunrise_sunset()
        print(f'Retrieved Amsterdam sunrise time of {sunrise.strftime("%H:%M")} and sunset time of {sunset.strftime("%H:%M")} (local time)')

        print('New crontab commands:')
        update_crontab(sunrise=sunrise, sunset=sunset, user='daan')
    
    elif args.mode == 'reset':
        remove_crontab_jobs(user='daan')
    
    else:
        print("Did not receive valid '--mode' argument of 'light-mode', 'dark-mode', 'upsert' or 'reset', exiting.")

